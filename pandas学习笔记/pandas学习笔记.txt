1.pandas的基本介绍

输入：
    import numpy as np
    import pandas as pd
    s = pd.Series([1,3,6,np.nan,44,1])
    dates = pd.date_range('20160101',periods=6)
    df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=['a','b','c','d']) #index是列标，columns是行标
    df1 = pd.DataFrame(np.arange(12).reshape(3,4))
    df2 = pd.DataFrame({'A':1,
                        'B':pd.Timestamp('20130102'),
                        'C':pd.Series(1,index=list(range(4)),dtype='float32'),
                        'D':np.array([3]*4,dtype='int32'),
                        'E':pd.Categorical(["test","train","test","train"]),
                        'F':'foo'})
输出：
    print(s)
    0     1.0
    1     3.0
    2     6.0
    3     NaN
    4    44.0
    5     1.0
    dtype: float64

    print(dates)
    DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',
                '2016-01-05', '2016-01-06'],
                dtype='datetime64[ns]', freq='D')
    
    print(df)
                       a         b         c         d
    2016-01-01 -0.081133  1.582821 -0.427520  0.108639
    2016-01-02  1.409594 -2.629122  0.495080 -0.897988
    2016-01-03  1.641919  0.453760 -0.671318 -0.266674
    2016-01-04 -0.042556 -1.216245  0.547520  2.271113
    2016-01-05 -2.263155  0.451284 -0.377563  0.414942
    2016-01-06 -1.431125  0.016310 -1.975570 -0.746453

    print(df1)
       0  1   2   3
    0  0  1   2   3
    1  4  5   6   7
    2  8  9  10  11

    print(df2)
       A          B    C  D      E    F
    0  1 2013-01-02  1.0  3   test  foo
    1  1 2013-01-02  1.0  3  train  foo
    2  1 2013-01-02  1.0  3   test  foo
    3  1 2013-01-02  1.0  3  train  foo
    
    print(df2.dtypes) #输出每列的数据类型
    A             int64
    B    datetime64[ns]
    C           float32
    D             int32
    E          category
    F            object
    dtype: object

    print(df2.columns) #输出列标
    Index(['A', 'B', 'C', 'D', 'E', 'F'], dtype='object')

    print(df2.values) #输出所有数据值
    [[1 Timestamp('2013-01-02 00:00:00') 1.0 3 'test' 'foo']
     [1 Timestamp('2013-01-02 00:00:00') 1.0 3 'train' 'foo']
     [1 Timestamp('2013-01-02 00:00:00') 1.0 3 'test' 'foo']
     [1 Timestamp('2013-01-02 00:00:00') 1.0 3 'train' 'foo']]

    print(df2.T) #输出转置
                         0                    1                    2  \
    A                    1                    1                    1   
    B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   
    C                    1                    1                    1   
    D                    3                    3                    3   
    E                 test                train                 test   
    F                  foo                  foo                  foo   

                        3  
    A                    1  
    B  2013-01-02 00:00:00  
    C                    1  
    D                    3  
    E                train  
    F                  foo

    print(df2.sort_index(axis=1,ascending=False)) #输出按列排序的逆序
         F      E  D    C          B  A
    0  foo   test  3  1.0 2013-01-02  1
    1  foo  train  3  1.0 2013-01-02  1
    2  foo   test  3  1.0 2013-01-02  1
    3  foo  train  3  1.0 2013-01-02  1

    print(df2.sort_index(axis=0,ascending=False)) #输出按行排序的逆序
       A          B    C  D      E    F
    3  1 2013-01-02  1.0  3  train  foo
    2  1 2013-01-02  1.0  3   test  foo
    1  1 2013-01-02  1.0  3  train  foo
    0  1 2013-01-02  1.0  3   test  foo

    print(df2.sort_values(by='E')) #输出按照E这一行的排序
       A          B    C  D      E    F
    0  1 2013-01-02  1.0  3   test  foo
    2  1 2013-01-02  1.0  3   test  foo
    1  1 2013-01-02  1.0  3  train  foo
    3  1 2013-01-02  1.0  3  train  foo

2.pandas选择数据
    输入：
    import numpy as np
    import pandas as pd
    dates = pd.date_range('20130101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=['A','B','C','D'])
    
    输出：
    print(df['A'],'\n',df.A)
    2013-01-01     0
    2013-01-02     4
    2013-01-03     8
    2013-01-04    12
    2013-01-05    16
    2013-01-06    20
    Freq: D, Name: A, dtype: int32 
    2013-01-01     0
    2013-01-02     4
    2013-01-03     8
    2013-01-04    12
    2013-01-05    16
    2013-01-06    20
    Freq: D, Name: A, dtype: int32

    print(df[0:3],'\n',df['20130102':'20130104'])
                A  B   C   D
    2013-01-01  0  1   2   3
    2013-01-02  4  5   6   7
    2013-01-03  8  9  10  11 
                A   B   C   D
    2013-01-02   4   5   6   7
    2013-01-03   8   9  10  11
    2013-01-04  12  13  14  15

    print(df.loc['20130102']) #以标签的形式选择
    A    4
    B    5
    C    6
    D    7
    Name: 2013-01-02 00:00:00, dtype: int32

    print(df.loc['20130102',['A','B']])  #以标签的形式选择
    A    4
    B    5
    Name: 2013-01-02 00:00:00, dtype: int32

    print(df.iloc[3:5,1:3]) #以位置进行筛选
                 B   C
    2013-01-04  13  14
    2013-01-05  17  18
    
    print(df.iloc[[1,3,5],1:3]) #以位置进行筛选
                 B   C
    2013-01-02   5   6
    2013-01-04  13  14
    2013-01-06  21  22

    print(df.ix[:3,['A','C']])  #位置和标签混合进行筛选
                A   C
    2013-01-01  0   2
    2013-01-02  4   6
    2013-01-03  8  10

    print(df[df.A>8]) #条件筛选
                 A   B   C   D
    2013-01-04  12  13  14  15
    2013-01-05  16  17  18  19
    2013-01-06  20  21  22  23

3.pandas设置值
    
    输入：
    import numpy as np
    import pandas as pd
    dates = pd.date_range('20130101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=['A','B','C','D'])
    print(df)
    print('\n')
    df.iloc[2,2] = 1111
    df.loc['20130101','B'] =2222
    df.A[df.A>12] = 0
    df['F'] = np.nan
    df['E'] = pd.Series([1,2,3,4,5,6],index=pd.date_range('20130101',periods=6))
    print(df)
    
    输出：
                 A   B   C   D
    2013-01-01   0   1   2   3
    2013-01-02   4   5   6   7
    2013-01-03   8   9  10  11
    2013-01-04  12  13  14  15
    2013-01-05  16  17  18  19
    2013-01-06  20  21  22  23


                 A     B     C   D   F  E
    2013-01-01   0  2222     2   3 NaN  1
    2013-01-02   4     5     6   7 NaN  2
    2013-01-03   8     9  1111  11 NaN  3
    2013-01-04  12    13    14  15 NaN  4
    2013-01-05   0    17    18  19 NaN  5
    2013-01-06   0    21    22  23 NaN  6

4.pandas处理丢失数据
    输入：
    import numpy as np
    import pandas as pd
    dates = pd.date_range('20130101',periods=6)
    df = pd.DataFrame(np.arange(24).reshape((6,4)),index=dates,columns=['A','B','C','D'])
    df.iloc[0,1] = np.nan
    df.iloc[1,2] = np.nan

    输出：
    print(df.dropna(axis=0,how='any')) #how={'any','all'} any只要有就删掉，all当且仅当全部有的话才删除
                 A     B     C   D
    2013-01-03   8   9.0  10.0  11
    2013-01-04  12  13.0  14.0  15
    2013-01-05  16  17.0  18.0  19
    2013-01-06  20  21.0  22.0  23

    print(df.fillna(value=0))  #nan的地方填充数值
                 A     B     C   D
    2013-01-01   0   0.0   2.0   3
    2013-01-02   4   5.0   0.0   7
    2013-01-03   8   9.0  10.0  11
    2013-01-04  12  13.0  14.0  15
    2013-01-05  16  17.0  18.0  19
    2013-01-06  20  21.0  22.0  23

    print(np.any(df.isnull()) == True) #至少个空值，就可以返回True

    True

5.pandas导入导出
    输入：
    import pandas as pd
    data = pd.read_csv('student.csv') #导入
    print(data)

    data.to_pickle('student.pickle') #导出
    输出：
        student ID   name  age  gender
    0         1100  kelly   22  Female
    1         1101    Clo   21  Female
    2         1102  Tilly   22  Female
    3         1103   Tony   24    Male
    4         1104  David   20    Male
    5         1105  Catty   22  Female
    6         1106      M    3  Female
    7         1107      N   43    Male
    8         1108      A   13    Male
    9         1109      S   12    Male
    10        1110  David   33    Male
    11        1111     Dw    3  Female
    12        1112      Q   23    Male

6.pandas合并concat
    输入：
    import numpy as np
    import pandas as pd

    df1 = pd.DataFrame(np.ones((3,4))*0,columns=['a','b','c','d'],index=[1,2,3])
    df2 = pd.DataFrame(np.ones((3,4))*1,columns=['b','c','d','e'],index=[2,3,4])
    df3 = pd.DataFrame(np.ones((3,4))*2,columns=['b','c','d','e'],index=[2,3,4])
    s1 = pd.Series([1,2,3,4],index=['a','b','c','d'])
    res = df1.append(s1,ignore_index=True)

    res1 = pd.concat([df1,df2,df3],axis=0,ignore_index=True)
    #join有2种参数，outer表示全部合并，没有数据的用NaN填充，inner(默认)仅仅合并全部有数据的列，其他的全部舍弃
    res2 = pd.concat([df1,df2],join='outer',ignore_index=True)
    #以df1位标准，将df2上有的数据全部加在df1上
    res3 = pd.concat([df1,df2],axis=1,join_axes=[df1.index])
    #将df2和df3全部加在df1上
    res4 = df1.append([df2,df3],ignore_index=True)

    print(res1)
    print(res2)
    print(res3)
    print(res4)

    输出：
         a    b    c    d    e
    0  0.0  0.0  0.0  0.0  NaN
    1  0.0  0.0  0.0  0.0  NaN
    2  0.0  0.0  0.0  0.0  NaN
    3  NaN  1.0  1.0  1.0  1.0
    4  NaN  1.0  1.0  1.0  1.0
    5  NaN  1.0  1.0  1.0  1.0
    6  NaN  2.0  2.0  2.0  2.0
    7  NaN  2.0  2.0  2.0  2.0
    8  NaN  2.0  2.0  2.0  2.0
        a    b    c    d    e
    0  0.0  0.0  0.0  0.0  NaN
    1  0.0  0.0  0.0  0.0  NaN
    2  0.0  0.0  0.0  0.0  NaN
    3  NaN  1.0  1.0  1.0  1.0
    4  NaN  1.0  1.0  1.0  1.0
    5  NaN  1.0  1.0  1.0  1.0
        a    b    c    d    b    c    d    e
    1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN
    2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
    3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0
        a    b    c    d    e
    0  0.0  0.0  0.0  0.0  NaN
    1  0.0  0.0  0.0  0.0  NaN
    2  0.0  0.0  0.0  0.0  NaN
    3  NaN  1.0  1.0  1.0  1.0
    4  NaN  1.0  1.0  1.0  1.0
    5  NaN  1.0  1.0  1.0  1.0
    6  NaN  2.0  2.0  2.0  2.0
    7  NaN  2.0  2.0  2.0  2.0
    8  NaN  2.0  2.0  2.0  2.0  

7.pandas合并merge

    输入：
    import numpy as np
    import pandas as pd

    left = pd.DataFrame({'key':['K0','K1','K2','K3'],
                        'A':['A0','A1','A2','A3'],
                        'B':['B0','B1','B2','B3']
                        })

    right = pd.DataFrame({'key':['K0','K1','K2','K3'],
                        'C':['C0','C1','C2','C3'],
                        'D':['D0','D1','D2','D3']
                        })
    print(left)
    print(right)
    res = pd.merge(left,right,on='key')
    print(res)

    输出：
        A   B key
    0  A0  B0  K0
    1  A1  B1  K1
    2  A2  B2  K2
    3  A3  B3  K3
        C   D key
    0  C0  D0  K0
    1  C1  D1  K1
    2  C2  D2  K2
    3  C3  D3  K3
        A   B key   C   D
    0  A0  B0  K0  C0  D0
    1  A1  B1  K1  C1  D1
    2  A2  B2  K2  C2  D2
    3  A3  B3  K3  C3  D3

    输入：
    import numpy as np
    import pandas as pd

    left = pd.DataFrame({'key1':['K0','K0','K1','K2'],
                        'key2':['K0','K1','K0','K1'],
                        'A':['A0','A1','A2','A3'],
                        'B':['B0','B1','B2','B3']
                        })

    right = pd.DataFrame({'key1':['K0','K1','K1','K2'],
                        'key2':['K0','K0','K0','K0'],
                        'C':['C0','C1','C2','C3'],
                        'D':['D0','D1','D2','D3']
                        })
    print(left)
    print(right)
    # how = {'left','right','outer',''inner} 同样可以基于这4种方式进行填充
    res = pd.merge(left,right,on=['key1','key2'],how='left')
    print(res)

    输出：
        A   B key1 key2
    0  A0  B0   K0   K0
    1  A1  B1   K0   K1
    2  A2  B2   K1   K0
    3  A3  B3   K2   K1
        C   D key1 key2
    0  C0  D0   K0   K0
    1  C1  D1   K1   K0
    2  C2  D2   K1   K0
    3  C3  D3   K2   K0
        A   B key1 key2    C    D
    0  A0  B0   K0   K0   C0   D0
    1  A1  B1   K0   K1  NaN  NaN
    2  A2  B2   K1   K0   C1   D1
    3  A2  B2   K1   K0   C2   D2
    4  A3  B3   K2   K1  NaN  NaN

    输入：
    import numpy as np
    import pandas as pd

    df1 = pd.DataFrame({'col1':[0,1],'col_left':['a','b']})
    df2 = pd.DataFrame({'col1':[1,2,2],'col_right':[2,2,2]})

    print(df1)
    print(df2)
    #indicator=True可以清晰的显示数据是否有,indicator='indicator_column'表示给indicator改个名字
    res = pd.merge(df1,df2,on='col1',how='outer',indicator='indicator_column')
    print(res)

    输出：
       col1 col_left
    0     0        a
    1     1        b
    col1  col_right
    0     1          2
    1     2          2
    2     2          2
    col1 col_left  col_right indicator_column
    0     0        a        NaN        left_only
    1     1        b        2.0             both
    2     2      NaN        2.0       right_only
    3     2      NaN        2.0       right_only

    输入：
    import numpy as np
    import pandas as pd

    left = pd.DataFrame({'A':['A0','A1','A2'],
                        'B':['B0','B1','B2']},
                        index=['K0','K1','K2'])

    right = pd.DataFrame({'C':['C0','C2','C3'],
                        'D':['D0','D2','D3']},
                        index=['K0','K2','K3'])

    print(left)
    print(right)
    res = pd.merge(left,right,left_index=True,right_index=True,how='outer')
    print(res)

    输出：
         A   B
    K0  A0  B0
    K1  A1  B1
    K2  A2  B2
        C   D
    K0  C0  D0
    K2  C2  D2
    K3  C3  D3
        A    B    C    D
    K0   A0   B0   C0   D0
    K1   A1   B1  NaN  NaN
    K2   A2   B2   C2   D2
    K3  NaN  NaN   C3   D3

    输入：
    import pandas as pd

    boys = pd.DataFrame({'k':['K0','K1','K2'],'age':[1,2,3]})

    girls = pd.DataFrame({'k':['K0','K0','K3'],'age':[4,5,6]})

    print(boys)
    print(girls)
    res = pd.merge(boys,girls,on='k',suffixes=['_boy','_girl'],how='outer')
    print(res)

    输出：
       age   k
    0    1  K0
    1    2  K1
    2    3  K2
    age   k
    0    4  K0
    1    5  K0
    2    6  K3
    age_boy   k  age_girl
    0      1.0  K0       4.0
    1      1.0  K0       5.0
    2      2.0  K1       NaN
    3      3.0  K2       NaN
    4      NaN  K3       6.0